#Day 96: Python's standard library modules


#Dive into Python's standard library modules (e.g., datetime, itertools, functools).


from datetime import datetime, timedelta
from itertools import count, permutations, combinations, groupby
from functools import lru_cache, reduce, partial

# 1️⃣ datetime - Working with Dates and Times
now = datetime.now()
formatted_date = now.strftime("%Y-%m-%d %H:%M:%S")
future_date = now + timedelta(days=10)

print("Current Date & Time:", now)
print("Formatted Date:", formatted_date)
print("Date after 10 days:", future_date)

# 2️⃣ itertools - Efficient Iterations
print("\nCount example (start=5, step=2):")
for i in count(start=5, step=2):
    print(i, end=" ")
    if i > 15:  # To avoid infinite loop
        break

data = ['A', 'B', 'C']
print("\n\nPermutations (2 elements):", list(permutations(data, 2)))
print("Combinations (2 elements):", list(combinations(data, 2)))

group_data = [("a", 1), ("a", 2), ("b", 3), ("b", 4)]
grouped = groupby(group_data, key=lambda x: x[0])

print("\nGrouped Data:")
for key, group in grouped:
    print(key, list(group))

# 3️⃣ functools - Functional Programming Utilities

# lru_cache - Memoization
@lru_cache(maxsize=5)
def factorial(n):
    if n == 0:
        return 1
    return n * factorial(n - 1)

print("\nFactorial of 5:", factorial(5))

# reduce - Aggregation
numbers = [1, 2, 3, 4, 5]
product = reduce(lambda x, y: x * y, numbers)
print("Product of numbers:", product)

# partial - Freezing Arguments
def power(base, exp):
    return base ** exp

square = partial(power, exp=2)
print("Square of 5:", square(5))
